// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ogma3.Data;
using Ogma3.Data.Clubs;
using Ogma3.Data.Stories;

namespace Ogma3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201227071603_ChapterConfig")]
    partial class ChapterConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "e_club_member_roles", new[] { "founder", "admin", "moderator", "user" })
                .HasPostgresEnum(null, "e_deleted_by", new[] { "user", "staff" })
                .HasPostgresEnum(null, "e_story_status", new[] { "in_progress", "completed", "on_hiatus", "cancelled" })
                .HasPostgresExtension("uuid-ossp")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Ogma3.Data.Models.BlacklistedRating", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RatingId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RatingId");

                    b.HasIndex("RatingId");

                    b.ToTable("BlacklistedRatings");
                });

            modelBuilder.Entity("Ogma3.Data.Models.BlacklistedTag", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BlacklistedTags");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Blogpost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("AttachedChapterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AttachedStoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500000)
                        .HasColumnType("character varying(500000)");

                    b.Property<long?>("ContentBlockId")
                        .HasColumnType("bigint");

                    b.Property<string[]>("Hashtags")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("text[]");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("WordCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachedChapterId");

                    b.HasIndex("AttachedStoryId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContentBlockId")
                        .IsUnique();

                    b.ToTable("Blogposts");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500000)
                        .HasColumnType("character varying(500000)");

                    b.Property<long?>("ContentBlockId")
                        .HasColumnType("bigint");

                    b.Property<string>("EndNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StartNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("WordCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentBlockId")
                        .IsUnique();

                    b.HasIndex("StoryId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ChaptersRead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<List<long>>("Chapters")
                        .HasColumnType("bigint[]");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ChaptersRead");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Club", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(25000)
                        .HasColumnType("character varying(25000)");

                    b.Property<string>("Hook")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("IconId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ClubMember", b =>
                {
                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("timestamp without time zone");

                    b.Property<EClubMemberRoles>("Role")
                        .HasColumnType("e_club_member_roles");

                    b.HasKey("ClubId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("ClubMembers");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ClubThread", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(25000)
                        .HasColumnType("character varying(25000)");

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubThreads");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<long>("CommentsThreadId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<long?>("DeletedByUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EditCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastEdit")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentsThreadId");

                    b.HasIndex("DeletedByUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Ogma3.Data.Models.CommentRevision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("EditTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CommentRevisions");
                });

            modelBuilder.Entity("Ogma3.Data.Models.CommentsThread", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("BlogpostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClubThreadId")
                        .HasColumnType("bigint");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlogpostId")
                        .IsUnique();

                    b.HasIndex("ChapterId")
                        .IsUnique();

                    b.HasIndex("ClubThreadId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CommentThreads");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ContentBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.ToTable("ContentBlocks");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RevisionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Slug", "Version")
                        .IsUnique();

                    b.HasIndex("Title", "Version")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Folder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<EClubMemberRoles>("AccessLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("e_club_member_roles")
                        .HasDefaultValue(EClubMemberRoles.User);

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentFolderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoriesCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Ogma3.Data.Models.FolderStory", b =>
                {
                    b.Property<long>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.HasKey("FolderId", "StoryId");

                    b.HasIndex("StoryId");

                    b.ToTable("FolderStories");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Icon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Icons");
                });

            modelBuilder.Entity("Ogma3.Data.Models.InviteCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IssuedById")
                        .HasColumnType("bigint");

                    b.Property<string>("NormalizedCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UsedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UsedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("UsedById")
                        .IsUnique();

                    b.ToTable("InviteCodes");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ModeratorAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StaffMemberId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StaffMemberId");

                    b.ToTable("ModeratorActions");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Namespace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Namespaces");
                });

            modelBuilder.Entity("Ogma3.Data.Models.OgmaRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte?>("Order")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Ogma3.Data.Models.OgmaUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("AvatarId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BannedUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Bio")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("MutedUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Quote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("BlacklistedByDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("IconId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("BlogpostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ReporterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlogpostId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ClubId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Shelf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("IconId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuickAdd")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ShelfStory", b =>
                {
                    b.Property<long>("ShelfId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.HasKey("ShelfId", "StoryId");

                    b.HasIndex("StoryId");

                    b.ToTable("ShelfStories");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Story", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<int>("ChapterCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<long?>("ContentBlockId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<string>("CoverId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("Hook")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("RatingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<EStoryStatus>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("e_story_status")
                        .HasDefaultValue(EStoryStatus.InProgress);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("WordCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContentBlockId")
                        .IsUnique();

                    b.HasIndex("RatingId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("Ogma3.Data.Models.StoryTag", b =>
                {
                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("StoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("StoryTags");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long?>("NamespaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NamespaceId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Ogma3.Data.Models.UserBlock", b =>
                {
                    b.Property<long>("BlockingUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("BlockingUserId", "BlockedUserId");

                    b.HasIndex("BlockedUserId");

                    b.ToTable("BlacklistedUsers");
                });

            modelBuilder.Entity("Ogma3.Data.Models.UserFollow", b =>
                {
                    b.Property<long>("FollowingUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("FollowingUserId", "FollowedUserId");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("FollowedUsers");
                });

            modelBuilder.Entity("Ogma3.Data.Models.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId", "StoryId")
                        .IsUnique();

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ogma3.Data.Models.BlacklistedRating", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "User")
                        .WithMany("BlacklistedRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ogma3.Data.Models.BlacklistedTag", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "User")
                        .WithMany("BlacklistedTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Blogpost", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Chapter", "AttachedChapter")
                        .WithMany()
                        .HasForeignKey("AttachedChapterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ogma3.Data.Models.Story", "AttachedStory")
                        .WithMany()
                        .HasForeignKey("AttachedStoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Author")
                        .WithMany("Blogposts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.ContentBlock", "ContentBlock")
                        .WithOne()
                        .HasForeignKey("Ogma3.Data.Models.Blogpost", "ContentBlockId");

                    b.Navigation("AttachedChapter");

                    b.Navigation("AttachedStory");

                    b.Navigation("Author");

                    b.Navigation("ContentBlock");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Chapter", b =>
                {
                    b.HasOne("Ogma3.Data.Models.ContentBlock", "ContentBlock")
                        .WithOne()
                        .HasForeignKey("Ogma3.Data.Models.Chapter", "ContentBlockId");

                    b.HasOne("Ogma3.Data.Models.Story", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentBlock");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ChaptersRead", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ClubMember", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Club", "Club")
                        .WithMany("ClubMembers")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ClubThread", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.Club", null)
                        .WithMany("Threads")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Comment", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Ogma3.Data.Models.CommentsThread", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentsThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.Navigation("Author");

                    b.Navigation("DeletedByUser");
                });

            modelBuilder.Entity("Ogma3.Data.Models.CommentRevision", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Comment", "Parent")
                        .WithMany("Revisions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Ogma3.Data.Models.CommentsThread", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Blogpost", "Blogpost")
                        .WithOne("CommentsThread")
                        .HasForeignKey("Ogma3.Data.Models.CommentsThread", "BlogpostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.Chapter", "Chapter")
                        .WithOne("CommentsThread")
                        .HasForeignKey("Ogma3.Data.Models.CommentsThread", "ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.ClubThread", "ClubThread")
                        .WithOne("CommentsThread")
                        .HasForeignKey("Ogma3.Data.Models.CommentsThread", "ClubThreadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "User")
                        .WithOne("CommentsThread")
                        .HasForeignKey("Ogma3.Data.Models.CommentsThread", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Blogpost");

                    b.Navigation("Chapter");

                    b.Navigation("ClubThread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ContentBlock", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Folder", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Club", "Club")
                        .WithMany("Folders")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.Folder", "ParentFolder")
                        .WithMany("ChildFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Club");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Ogma3.Data.Models.FolderStory", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Ogma3.Data.Models.InviteCode", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "UsedBy")
                        .WithOne()
                        .HasForeignKey("Ogma3.Data.Models.InviteCode", "UsedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IssuedBy");

                    b.Navigation("UsedBy");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ModeratorAction", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "StaffMember")
                        .WithMany()
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("StaffMember");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Report", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Blogpost", "Blogpost")
                        .WithMany("Reports")
                        .HasForeignKey("BlogpostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.Chapter", "Chapter")
                        .WithMany("Reports")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.Club", "Club")
                        .WithMany("Reports")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.Story", "Story")
                        .WithMany("Reports")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Blogpost");

                    b.Navigation("Chapter");

                    b.Navigation("Club");

                    b.Navigation("Comment");

                    b.Navigation("Reporter");

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Shelf", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Icon");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ShelfStory", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Shelf", "Shelf")
                        .WithMany("ShelfStories")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelf");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Story", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "Author")
                        .WithMany("Stories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.ContentBlock", "ContentBlock")
                        .WithOne()
                        .HasForeignKey("Ogma3.Data.Models.Story", "ContentBlockId");

                    b.HasOne("Ogma3.Data.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ContentBlock");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Ogma3.Data.Models.StoryTag", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Tag", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Namespace", "Namespace")
                        .WithMany()
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("Ogma3.Data.Models.UserBlock", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "BlockingUser")
                        .WithMany()
                        .HasForeignKey("BlockingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("BlockingUser");
                });

            modelBuilder.Entity("Ogma3.Data.Models.UserFollow", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaUser", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "FollowingUser")
                        .WithMany()
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("Ogma3.Data.Models.UserRole", b =>
                {
                    b.HasOne("Ogma3.Data.Models.OgmaRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Vote", b =>
                {
                    b.HasOne("Ogma3.Data.Models.Story", null)
                        .WithMany("Votes")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ogma3.Data.Models.OgmaUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Blogpost", b =>
                {
                    b.Navigation("CommentsThread");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Chapter", b =>
                {
                    b.Navigation("CommentsThread");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Club", b =>
                {
                    b.Navigation("ClubMembers");

                    b.Navigation("Folders");

                    b.Navigation("Reports");

                    b.Navigation("Threads");
                });

            modelBuilder.Entity("Ogma3.Data.Models.ClubThread", b =>
                {
                    b.Navigation("CommentsThread");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Comment", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("Ogma3.Data.Models.CommentsThread", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Folder", b =>
                {
                    b.Navigation("ChildFolders");
                });

            modelBuilder.Entity("Ogma3.Data.Models.OgmaUser", b =>
                {
                    b.Navigation("BlacklistedRatings");

                    b.Navigation("BlacklistedTags");

                    b.Navigation("Blogposts");

                    b.Navigation("CommentsThread");

                    b.Navigation("Reports");

                    b.Navigation("Stories");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Shelf", b =>
                {
                    b.Navigation("ShelfStories");
                });

            modelBuilder.Entity("Ogma3.Data.Models.Story", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Reports");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
