{"version":3,"sources":["admin/categories.min.js"],"names":["vue","Vue","el","data","form","name","desc","id","lens","minNameLength","maxNameLength","minDescLength","maxDescLength","err","categories","route","methods","createCategory","e","preventDefault","this","length","push","axios","post","description","then","_","getCategories","catch","error","console","log","put","get","response","deleteCategory","t","delete","editCategory","cancelEdit","[object Object]","document","getElementById","dataset","r"],"mappings":"AAAA,IAAIA,IAAM,IAAIC,IAAI,CACdC,GAAI,OACJC,KAAM,CACFC,KAAM,CACFC,KAAM,KACNC,KAAM,KACNC,GAAI,MAERC,KAAM,CACFC,cAAc,EACdC,cAAc,GACdC,cAAc,GACdC,cAAc,KAElBC,IAAK,GACLC,WAAY,GACZC,MAAO,MAEXC,QAAS,CAILC,eAAgB,SAASC,GACrBA,EAAEC,iBAIFC,KAAKP,IAAM,IACPO,KAAKhB,KAAKC,KAAKgB,OAASD,KAAKZ,KAAKE,eAAiBU,KAAKhB,KAAKC,KAAKgB,OAASD,KAAKZ,KAAKC,gBACrFW,KAAKP,IAAIS,KAAK,0BAA0BF,KAAKZ,KAAKC,qBAAqBW,KAAKZ,KAAKE,mCACjFU,KAAKhB,KAAKE,KAAKe,OAASD,KAAKZ,KAAKI,eAAiBQ,KAAKhB,KAAKE,KAAKe,OAASD,KAAKZ,KAAKG,gBACrFS,KAAKP,IAAIS,KAAK,iCAAiCF,KAAKZ,KAAKG,qBAAqBS,KAAKZ,KAAKI,kCACxFQ,KAAKP,IAAIQ,OAAS,GAGlBD,KAAKhB,KAAKC,MAAQe,KAAKhB,KAAKE,OAIP,OAAjBc,KAAKhB,KAAKG,GACVgB,MAAMC,KAAKJ,KAAKL,MACZ,CACIV,KAAMe,KAAKhB,KAAKC,KAChBoB,YAAaL,KAAKhB,KAAKE,OAE1BoB,KAAKC,IACFP,KAAKQ,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,KAMpBP,MAAMU,IAAIb,KAAKL,MAAQ,IAAMK,KAAKhB,KAAKG,GACnC,CACIA,GAAIa,KAAKhB,KAAKG,GACdF,KAAMe,KAAKhB,KAAKC,KAChBoB,YAAaL,KAAKhB,KAAKE,OAE1BoB,KAAKC,IACFP,KAAKQ,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,KAGfJ,KAAKC,IACFP,KAAKhB,KAAKC,KACNe,KAAKhB,KAAKE,KACNc,KAAKhB,KAAKG,GAAK,SAQ3CqB,cAAe,WACXL,MAAMW,IAAId,KAAKL,OACVW,KAAKS,IACFf,KAAKN,WAAaqB,EAAShC,OAE9B0B,MAAMC,IACHC,QAAQC,IAAIF,MAKxBM,eAAgB,SAASC,GACrBd,MAAMe,OAAOlB,KAAKL,MAAQ,IAAMsB,EAAE9B,IAC7BmB,KAAKC,IACFP,KAAKQ,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,MAKxBS,aAAc,SAASF,GACnBjB,KAAKhB,KAAKC,KAAOgC,EAAEhC,KACnBe,KAAKhB,KAAKE,KAAO+B,EAAEZ,YACnBL,KAAKhB,KAAKG,GAAK8B,EAAE9B,IAIrBiC,WAAY,WACRpB,KAAKhB,KAAKC,KACNe,KAAKhB,KAAKE,KACNc,KAAKhB,KAAKG,GAAK,OAI/BkC,UAEIrB,KAAKL,MAAQ2B,SAASC,eAAe,SAASC,QAAQ7B,MAEtDQ,MAAMW,IAAId,KAAKL,MAAQ,eAClBW,KAAKmB,IACFzB,KAAKZ,KAAOqC,EAAE1C,OAEjB0B,MAAMX,GAAKa,QAAQD,MAAMZ,IAE9BE,KAAKQ","file":"categories.min.js","sourcesContent":["let vue = new Vue({ \r\n    el: \"#app\",\r\n    data: {\r\n        form: {\r\n            name: null,\r\n            desc: null,\r\n            id: null\r\n        },\r\n        lens: {\r\n            minNameLength:5,\r\n            maxNameLength:20,\r\n            minDescLength:10,\r\n            maxDescLength:100\r\n        },\r\n        err: [],\r\n        categories: [],\r\n        route: null\r\n    },\r\n    methods: {\r\n\r\n        // Contrary to its name, it also modifies a category if needed.\r\n        // It was simply easier to slap both functionalities into a single function.\r\n        createCategory: function(e) {\r\n            e.preventDefault();\r\n            \r\n            \r\n            // Validation\r\n            this.err = [];\r\n            if (this.form.name.length > this.lens.maxNameLength || this.form.name.length < this.lens.minNameLength) \r\n                this.err.push(`Name has to be between ${this.lens.minNameLength} and ${this.lens.maxNameLength} characters long.`);\r\n            if (this.form.desc.length > this.lens.maxDescLength || this.form.desc.length < this.lens.minDescLength) \r\n                this.err.push(`Description has to be between ${this.lens.minDescLength} and ${this.lens.maxDescLength} characters long.`);\r\n            if (this.err.length > 0) return;\r\n            \r\n\r\n            if (this.form.name && this.form.desc) {\r\n\r\n                // If no ID has been set, that means it's a new category.\r\n                // Thus, we POST it.\r\n                if (this.form.id === null) {\r\n                    axios.post(this.route,\r\n                        {\r\n                            name: this.form.name,\r\n                            description: this.form.desc\r\n                        })\r\n                        .then(_ => {\r\n                            this.getCategories()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        });\r\n                    \r\n                // If the ID is set, that means it's an existing category.\r\n                // Thus, we PUT it.\r\n                } else {\r\n                    axios.put(this.route + '/' + this.form.id,\r\n                        {\r\n                            id: this.form.id,\r\n                            name: this.form.name,\r\n                            description: this.form.desc\r\n                        })\r\n                        .then(_ => {\r\n                            this.getCategories()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        })\r\n                        // Clear the form too\r\n                        .then(_ => {\r\n                            this.form.name =\r\n                                this.form.desc =\r\n                                    this.form.id = null;\r\n                        });\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        // Gets all existing categories\r\n        getCategories: function() {\r\n            axios.get(this.route)\r\n                .then(response => {\r\n                    this.categories = response.data\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n\r\n        // Deletes a selected category\r\n        deleteCategory: function(t) {\r\n            axios.delete(this.route + '/' + t.id) \r\n                .then(_ => {\r\n                    this.getCategories() \r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n\r\n        // Throws a category from the list into the editor\r\n        editCategory: function(t) {\r\n            this.form.name = t.name;\r\n            this.form.desc = t.description;\r\n            this.form.id = t.id;\r\n        },\r\n\r\n        // Clears the editor\r\n        cancelEdit: function() {\r\n            this.form.name =\r\n                this.form.desc =\r\n                    this.form.id = null;\r\n        }\r\n    },\r\n    \r\n    mounted() {\r\n        // Grab the route from route helper\r\n        this.route = document.getElementById('route').dataset.route;\r\n        // Get validation\r\n        axios.get(this.route + '/validation')\r\n            .then(r => {\r\n                this.lens = r.data;\r\n            })\r\n            .catch(e => console.error(e));\r\n        // Grab the initial set of categories\r\n        this.getCategories();\r\n    }\r\n});"]}