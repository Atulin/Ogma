{"version":3,"sources":["admin/tags.min.js"],"names":["atags_vue","Vue","el","data","form","name","desc","namespace","id","lens","minNameLength","maxNameLength","minDescLength","maxDescLength","err","routes","tags","namespaces","methods","createTag","e","preventDefault","this","length","push","console","info","axios","post","namespaceId","description","then","_","getTags","catch","error","log","put","get","response","getNamespaces","deleteTag","t","delete","editTag","cancelEdit","[object Object]","document","getElementById","dataset","route","r"],"mappings":"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","file":"tags.min.js","sourcesContent":["let atags_vue = new Vue({ \r\n    el: \"#app\",\r\n    data: {\r\n        form: {\r\n            name: null,\r\n            desc: null,\r\n            namespace: null,\r\n            id: null\r\n        },\r\n        lens: {\r\n            minNameLength:5,\r\n            maxNameLength:20,\r\n            minDescLength:10,\r\n            maxDescLength:100\r\n        },\r\n        err: [],\r\n        routes: {\r\n            tags: null,\r\n            namespaces: null\r\n        },\r\n        tags: [],\r\n        namespaces: [],\r\n    },\r\n    methods: {\r\n\r\n        // Contrary to its name, it also modifies a tag if needed.\r\n        // It was simply easier to slap both functionalities into a single function.\r\n        createTag: function(e) {\r\n            e.preventDefault();\r\n\r\n            // Validation\r\n            this.err = [];\r\n            if (this.form.name.length > this.lens.maxNameLength || this.form.name.length < this.lens.minNameLength)\r\n                this.err.push(`Name has to be between ${this.lens.minNameLength} and ${this.lens.maxNameLength} characters long.`);\r\n            if (this.form.desc !== null && this.form.desc.length > this.lens.maxDescLength)\r\n                this.err.push(`Description has to be at most ${this.lens.maxDescLength} characters long.`);\r\n            if (this.err.length > 0) return; \r\n\r\n            console.info(this.form.name);\r\n            if (this.form.name) {\r\n\r\n                // If no ID has been set, that means it's a new tag.\r\n                // Thus, we POST it.\r\n                if (this.form.id === null) {\r\n                    axios.post(this.routes.tags,\r\n                        {\r\n                            name: this.form.name,\r\n                            namespaceId: this.form.namespace,\r\n                            description: this.form.desc\r\n                        })\r\n                        .then(_ => {\r\n                            this.getTags()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        });\r\n                    \r\n                // If the ID is set, that means it's an existing tag.\r\n                // Thus, we PUT it.\r\n                } else {\r\n                    axios.put(this.routes.tags + '/' + this.form.id,\r\n                        {\r\n                            id: this.form.id,\r\n                            name: this.form.name,\r\n                            namespaceId: this.form.namespace,\r\n                            description: this.form.desc\r\n                        })\r\n                        .then(_ => {\r\n                            this.getTags()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        })\r\n                        // Clear the form too\r\n                        .then(_ => {\r\n                            this.form.name =\r\n                                this.form.desc =\r\n                                    this.form.namespace = \r\n                                        this.form.id = null;\r\n                        });\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        // Gets all existing tags\r\n        getTags: function() {\r\n            axios.get(this.routes.tags)\r\n                .then(response => {\r\n                    this.tags = response.data\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n        \r\n        // Get all namespaces\r\n        getNamespaces: function() {\r\n            axios.get(this.routes.namespaces)\r\n                .then(response => {\r\n                    this.namespaces = response.data\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n\r\n        // Deletes a selected tag\r\n        deleteTag: function(t) {\r\n            axios.delete(this.routes.tags + '/' + t.id) \r\n                .then(_ => {\r\n                    this.getTags() \r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n\r\n        // Throws a tag from the list into the editor\r\n        editTag: function(t) {\r\n            this.form.name = t.name;\r\n            this.form.desc = t.description;\r\n            this.form.namespace = t.namespaceId;\r\n            this.form.id = t.id;\r\n        },\r\n\r\n        // Clears the editor\r\n        cancelEdit: function() {\r\n            this.form.name =\r\n                this.form.desc =\r\n                    this.form.namespace =\r\n                        this.form.id = null;\r\n        }\r\n    },\r\n    \r\n    mounted() {\r\n        // Grab the routes from route helpers\r\n        this.routes.tags = document.getElementById('tag-route').dataset.route;\r\n        this.routes.namespaces = document.getElementById('ns-route').dataset.route;\r\n        // Get validation data\r\n        axios.get(this.routes.tags + '/validation')\r\n            .then(r => {\r\n                this.lens = r.data;\r\n            })\r\n            .catch(e => console.error(e));\r\n        // Grab the initial set of tags\r\n        this.getTags();\r\n        this.getNamespaces();\r\n    }\r\n});"]}