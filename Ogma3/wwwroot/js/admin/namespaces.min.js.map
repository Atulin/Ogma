{"version":3,"sources":["admin/namespaces.min.js"],"names":["anamespaces_vue","Vue","el","data","form","name","color","a","r","g","b","id","lens","minNameLength","maxNameLength","err","namespaces","route","methods","createNamespace","e","preventDefault","this","length","push","axios","post","argb","calculateColor","then","_","getNamespaces","catch","error","console","log","put","get","response","deleteNamespace","t","delete","editNamespace","toFixed","updateColor","cancelEdit","[object Object]","document","getElementById","dataset","Math","round","toString","parseInt"],"mappings":"AAAA,IAAIA,gBAAkB,IAAIC,IAAI,CAC1BC,GAAI,OACJC,KAAM,CACFC,KAAM,CACFC,KAAM,KACNC,MAAO,CACHC,EAAG,KACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MAEPC,GAAI,MAERC,KAAM,CACFC,cAAe,EACfC,cAAe,IAEnBC,IAAK,GACLC,WAAY,GACZC,MAAO,KACPX,MAAO,MAEXY,QAAS,CAILC,gBAAiB,SAAUC,GACvBA,EAAEC,iBAGFC,KAAKP,IAAM,IACPO,KAAKlB,KAAKC,KAAKkB,OAASD,KAAKV,KAAKE,eAAiBQ,KAAKlB,KAAKC,KAAKkB,OAASD,KAAKV,KAAKC,gBACrFS,KAAKP,IAAIS,KAAK,0BAA0BF,KAAKV,KAAKC,qBAAqBS,KAAKV,KAAKE,kCACjFQ,KAAKP,IAAIQ,OAAS,GAElBD,KAAKlB,KAAKC,OAIW,OAAjBiB,KAAKlB,KAAKO,GACVc,MAAMC,KAAKJ,KAAKL,MACZ,CACIZ,KAAMiB,KAAKlB,KAAKC,KAChBsB,KAAMC,eAAeN,KAAKlB,KAAKE,SAElCuB,KAAKC,IACFR,KAAKS,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,KAMpBR,MAAMW,IAAId,KAAKL,MAAQ,IAAMK,KAAKlB,KAAKO,GACnC,CACIA,GAAIW,KAAKlB,KAAKO,GACdN,KAAMiB,KAAKlB,KAAKC,KAChBsB,KAAMC,eAAeN,KAAKlB,KAAKE,SAElCuB,KAAKC,IACFR,KAAKS,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,KAGfJ,KAAKC,IACFR,KAAKlB,KAAKC,KACNiB,KAAKlB,KAAKO,GAAK,SAQvCoB,cAAe,WACXN,MAAMY,IAAIf,KAAKL,OACVY,KAAKS,IACFhB,KAAKN,WAAasB,EAASnC,OAE9B6B,MAAMC,IACHC,QAAQC,IAAIF,MAKxBM,gBAAiB,SAAUC,GACvBf,MAAMgB,OAAOnB,KAAKL,MAAQ,IAAMuB,EAAE7B,IAC7BkB,KAAKC,IACFR,KAAKS,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,MAKxBS,cAAe,SAAUF,GACrBlB,KAAKlB,KAAKC,KAAOmC,EAAEnC,KACnBiB,KAAKlB,KAAKE,MAAQkC,EAAElC,MACpBgB,KAAKlB,KAAKE,MAAMC,EAAIiC,EAAElC,MAAMC,EAAI,GAAKiC,EAAElC,MAAMC,EAAI,KAAKoC,QAAQ,GAAK,EACnErB,KAAKlB,KAAKO,GAAK6B,EAAE7B,GACjBW,KAAKsB,eAITC,WAAY,WACRvB,KAAKlB,KAAKC,KACNiB,KAAKlB,KAAKE,MACNgB,KAAKlB,KAAKO,GAAK,MAI3BiC,YAAa,WACTtB,KAAKhB,MAAQ,QAAQgB,KAAKlB,KAAKE,MAAME,MAAMc,KAAKlB,KAAKE,MAAMG,MAAMa,KAAKlB,KAAKE,MAAMI,MAAMY,KAAKlB,KAAKE,MAAMC,OAI/GuC,UAEIxB,KAAKL,MAAQ8B,SAASC,eAAe,SAASC,QAAQhC,MAEtDQ,MAAMY,IAAIf,KAAKL,MAAQ,eAClBY,KAAKrB,IACFc,KAAKV,KAAOJ,EAAEL,OAEjB6B,MAAMZ,GAAKc,QAAQD,MAAMb,IAE9BE,KAAKS,mBAIb,SAASH,eAAgBtB,GACrB,IAAIC,EAAI2C,KAAKC,MAAgB,IAAV7C,EAAMC,GAAS6C,SAAS,IACvC5C,EAAIF,EAAME,EAAE4C,SAAS,IACrB3C,EAAIH,EAAMG,EAAE2C,SAAS,IACrB1C,EAAIJ,EAAMI,EAAE0C,SAAS,IACzB,OAAOC,SAAS,GAAG9C,IAAIC,IAAIC,IAAIC,IAAK","file":"namespaces.min.js","sourcesContent":["let anamespaces_vue = new Vue({\r\n    el: \"#app\",\r\n    data: {\r\n        form: {\r\n            name: null,\r\n            color: {\r\n                a: null,\r\n                r: null,\r\n                g: null,\r\n                b: null,\r\n            },\r\n            id: null\r\n        },\r\n        lens: {\r\n            minNameLength: 5,\r\n            maxNameLength: 10,\r\n        },\r\n        err: [],\r\n        namespaces: [],\r\n        route: null,\r\n        color: null\r\n    },\r\n    methods: {\r\n\r\n        // Contrary to its name, it also modifies a namespace if needed.\r\n        // It was simply easier to slap both functionalities into a single function.\r\n        createNamespace: function (e) {\r\n            e.preventDefault();\r\n\r\n            // Validation\r\n            this.err = [];\r\n            if (this.form.name.length > this.lens.maxNameLength || this.form.name.length < this.lens.minNameLength)\r\n                this.err.push(`Name has to be between ${this.lens.minNameLength} and ${this.lens.maxNameLength} characters long.`);\r\n            if (this.err.length > 0) return;\r\n\r\n            if (this.form.name) {\r\n\r\n                // If no ID has been set, that means it's a new namespace.\r\n                // Thus, we POST it.\r\n                if (this.form.id === null) {\r\n                    axios.post(this.route,\r\n                        {\r\n                            name: this.form.name,\r\n                            argb: calculateColor(this.form.color)\r\n                        })\r\n                        .then(_ => {\r\n                            this.getNamespaces()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        });\r\n\r\n                    // If the ID is set, that means it's an existing namespace.\r\n                    // Thus, we PUT it.\r\n                } else {\r\n                    axios.put(this.route + '/' + this.form.id,\r\n                        {\r\n                            id: this.form.id,\r\n                            name: this.form.name,\r\n                            argb: calculateColor(this.form.color)\r\n                        })\r\n                        .then(_ => {\r\n                            this.getNamespaces()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        })\r\n                        // Clear the form too\r\n                        .then(_ => {\r\n                            this.form.name =\r\n                                this.form.id = null;\r\n                        });\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        // Gets all existing namespaces\r\n        getNamespaces: function () {\r\n            axios.get(this.route)\r\n                .then(response => {\r\n                    this.namespaces = response.data\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n\r\n        // Deletes a selected namespace\r\n        deleteNamespace: function (t) {\r\n            axios.delete(this.route + '/' + t.id)\r\n                .then(_ => {\r\n                    this.getNamespaces()\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n\r\n        // Throws a namespace from the list into the editor\r\n        editNamespace: function (t) {\r\n            this.form.name = t.name;\r\n            this.form.color = t.color;\r\n            this.form.color.a = t.color.a > 0 ? (t.color.a / 255).toFixed(2) : 0; // normalize alpha\r\n            this.form.id = t.id;\r\n            this.updateColor();\r\n        },\r\n\r\n        // Clears the editor\r\n        cancelEdit: function () {\r\n            this.form.name =\r\n                this.form.color =\r\n                    this.form.id = null;\r\n        },\r\n        \r\n        // Update the color\r\n        updateColor: function () {\r\n            this.color = `rgba(${this.form.color.r}, ${this.form.color.g}, ${this.form.color.b}, ${this.form.color.a})`;\r\n        }\r\n    }, \r\n\r\n    mounted() {\r\n        // Grab the route from route helper\r\n        this.route = document.getElementById('route').dataset.route;\r\n        // Get validation data\r\n        axios.get(this.route + '/validation')\r\n            .then(r => {\r\n                this.lens = r.data;\r\n            })\r\n            .catch(e => console.error(e));\r\n        // Grab the initial set of namespaces\r\n        this.getNamespaces();\r\n    }\r\n});\r\n\r\nfunction calculateColor (color) {\r\n    let a = Math.round(color.a * 255).toString(16);\r\n    let r = color.r.toString(16);\r\n    let g = color.g.toString(16);\r\n    let b = color.b.toString(16);\r\n    return parseInt(`${a}${r}${g}${b}`, 16)\r\n}"]}