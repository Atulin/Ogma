Vue.component("folder-item",{props:{folder:{type:Object,required:!0},sel:{type:Number}},methods:{bus:function(e){this.$emit("bus",e)}},template:'<div style="margin-left: 1rem">\n        <span v-on:click.self="$emit(\'bus\', folder.id)" :style="{ backgroundColor: this.sel === folder.id ? \'red\' : null }">\n          {{folder.id}}: {{folder.name}}\n        </span> \n        <template v-if="folder.children.length > 0">\n            <folder-item v-for="f in folder.children" \n                         :folder="f" \n                         :key="f.id"\n                         @bus="bus"\n                         :sel="sel">\n            </folder-item>  \n        </template>  \n    </div>'}),Vue.component("folder-tree",{props:{clubId:{type:Number,required:!0},route:{type:String,required:!0}},data:function(){return{folders:[],tree:[],sel:null}},methods:{unflatten:function(){let e=Object.create(null);this.folders.forEach(t=>e[t.id]={...t,children:[]}),this.folders.forEach(t=>{t.parentFolderId?e[t.parentFolderId].children.push(e[t.id]):this.tree.push(e[t.id])})},bus:function(e){console.log(e),this.sel=e}},mounted(){axios.get(`${this.route}/${this.clubId}`).then(e=>{this.folders=e.data,this.unflatten()}).catch(console.error)},template:'\n        <div class="folder-tree">\n          <input type="hidden" :value="sel" name="parentId">\n          <folder-item v-for="f in tree" \n                       :folder="f" \n                       :key="f.id"\n                       @bus="bus"\n                       :sel="sel">\n          </folder-item>\n        </div>\n    '});
//# sourceMappingURL=folder-tree-component.min.js.map
