Vue.component("comment",{props:{cdn:{type:String,required:!0},comment:{type:Object,required:!0},idx:{type:Number,required:!0},route:{type:String,required:!0},csrf:{type:String,required:!0},highlight:{type:Boolean,required:!1,default:!1}},data:function(){return{editData:null,mutComment:this.comment,revisions:[],revisionsCache:null,hide:this.comment.isBlocked}},methods:{del:function(){confirm("Are you sure you want to delete?")&&axios.delete(`${this.route}/${this.comment.id}`,{headers:{RequestVerificationToken:this.csrf}}).then((t=>this.mutComment=t.data)).catch(console.error)},edit:function(){this.editData&&this.editData.id===this.comment.id||(this.editData=null,axios.get(this.route+"/md",{params:{id:this.comment.id}}).then((t=>{this.editData={id:this.comment.id,body:t.data}})).catch(console.error))},update:function(t){t.preventDefault();let e={body:this.editData.body,id:Number(this.editData.id)};axios.patch(this.route,e,{headers:{RequestVerificationToken:this.csrf}}).then((t=>{Object.assign(this.mutComment,t.data),this.editData=null})).catch(console.error)},report:function(t){alert("Not implemented yet :(")},enter:function(t){t.ctrlKey&&this.update(t)},history:function(){this.revisions.length>0?this.revisions=[]:null!==this.revisionsCache?this.revisions=this.revisionsCache:axios.get(`${this.route}/revisions/${this.comment.id}`).then((t=>this.revisionsCache=this.revisions=t.data)).catch(console.error)},changeHighlight:function(t){t.preventDefault(),this.$emit("change-hl",this.idx+1)},toggleShow:function(){this.comment.isBlocked&&(this.hide=!this.hide)},date:function(t){return dayjs(t).format("DD MMM YYYY, HH:mm")}},template:'\n      <div :id="\'comment-\' + (idx + 1)"\n           class="comment" :class="highlight ? \'marked\' : \'\'">\n\n      \x3c!-- Blocked comment --\x3e\n      <template v-if="this.hide">\n        <div class="main" v-on:click="toggleShow">\n          <div class="header">\n            Comment hidden by user blacklist\n          </div>\n        </div>\n      </template>\n\n      \x3c!-- Deleted comment --\x3e\n      <template v-else-if="!mutComment.author">\n        <div class="main">\n          <div class="header">\n\n            <time :datetime="mutComment.dateTime" class="time">{{ date(mutComment.dateTime) }}</time>\n            <p class="sm-line"></p>\n            <span>Comment deleted by {{ mutComment.deletedBy.toLowerCase() }}.</span>\n\n          </div>\n        </div>\n      </template>\n\n      \x3c!-- Regular comment --\x3e\n      <template v-else>\n        <div class="author">\n\n          <a :href="\'/user/\' + mutComment.author.userName" class="name">{{ mutComment.author.userName }}</a>\n\n          <div v-if="mutComment.author.roles[0]" class="role-tag">\n            <span class="name">{{ mutComment.author.roles[0].name }}</span>\n            <div class="bg" :style="{backgroundColor: mutComment.author.roles[0].color}"></div>\n          </div>\n\n          <img :src="cdn + mutComment.author.avatar" :alt="mutComment.author.userName + \'\\\'s avatar\'" class="avatar">\n\n        </div>\n\n        <div class="main" :class="comment.isBlocked ? \'blocked\' : null">\n\n          <div class="header">\n\n            <a class="link"\n               :href="\'#comment-\' + (idx + 1)"\n               v-on:click="changeHighlight($event)">\n              #{{ idx + 1 }}\n            </a>\n\n            <p class="sm-line"></p>\n\n            <time :datetime="mutComment.dateTime" class="time" v-on:click="toggleShow">\n              {{ date(mutComment.dateTime) }}\n            </time>\n\n            <div class="actions">\n              \n              <button class="action-btn small red-hl" title="Report" v-on:click="report">\n                <i class="icon material-icons-outlined">flag</i>\n              </button>\n              \n              <template v-if="mutComment.owned">\n                \n                <button class="action-btn small" title="Delete" v-on:click="del">\n                  <i class="icon material-icons-outlined">delete_forever</i>\n                </button>\n                \n                <button class="action-btn small" title="Edit" v-on:click="edit">\n                  <i class="icon material-icons-outlined">edit</i>\n                </button>\n                \n              </template>\n            </div>\n\n          </div>\n\n          <div v-if="mutComment.body && (!editData || editData.id !== mutComment.id)" class="body md"\n               v-html="mutComment.body"></div>\n\n          <form class="form" v-if="editData && editData.id === mutComment.id">\n                    <textarea class="comment-box"\n                              v-model="editData.body"\n                              v-on:keydown.enter="enter"\n                              name="body" id="edit-body"\n                              rows="3"\n                              aria-label="Comment">\n                    </textarea>\n\n            <div class="buttons">\n              <button class="confirm active-border" v-on:click="update">\n                <i class="material-icons-outlined">edit</i>\n                Update\n              </button>\n              <button class="cancel active-border" v-on:click="editData = null">\n                <i class="material-icons-outlined">cancel</i>\n                Cancel\n              </button>\n            </div>\n          </form>\n\n          <span v-if="mutComment.lastEdit" class="edit-data">\n            Edited <span class="link" v-on:click="history">{{ mutComment.editCount }} times</span>, last edit: <time\n              :datetime="mutComment.lastEdit">{{ date(mutComment.lastEdit) }}</time>\n          </span>\n\n          <ol v-if="revisions.length > 0" class="history">\n            <li v-for="r in revisions">\n              <time :datetime="r.editTime">{{ date(r.editTime) }}</time>\n              <div class="body" v-html="r.body"></div>\n            </li>\n          </ol>\n\n        </div>\n      </template>\n      </div>\n    '});
//# sourceMappingURL=comment-component.min.js.map
