{"version":3,"sources":["input-progressbars.ts","input-progressbars.min.js"],"names":["_","_a","_b","inputs","document","querySelectorAll","i","max","dataset","maxCount","Number","maxLength","min","valLengthMin","counter","createElement","classList","add","progress","wordcount","count","length","value","split","innerText","appendChild","properSplit","toString","after","addEventListener","style","width","Math","toggle"],"mappings":"AAIA,CAACA,ICHG,IAAIC,EAAIC,EDOR,MAAMC,EAAmD,IAC9CC,SAASC,iBAAiB,2BAC1BD,SAASC,iBAAiB,4BAIrC,IAAK,MAAMC,KAAKH,EAAQ,CAGpB,IAAII,EAAcD,EAAEE,QAAQC,SACtBC,OAAOJ,EAAEE,QAAQC,UACN,QAAZR,EAACK,EAAEK,iBAAS,IAAAV,EAAAA,EAAI,EAEjBW,EAA4C,QAAzCV,EAAWQ,OAAOJ,EAAEE,QAAQK,qBAAa,IAAAX,EAAAA,EAAI,EAGhDY,EAAuBV,SAASW,cAAc,OAClDD,EAAQE,UAAUC,IAAI,WAGtB,IAAIC,EAAwBd,SAASW,cAAc,OACnDG,EAASF,UAAUC,IAAI,kBAGvB,IAYIE,EAZAC,EAAqBhB,SAASW,cAAc,QAG5CM,EAASf,EAAEE,QAAQC,SACjBH,EAAEgB,MAAMC,MAAM,KAAKF,OACnBf,EAAEgB,MAAMD,OACdD,EAAMI,UAAY,GAAGH,KAAUd,IAG/BO,EAAQW,YAAYP,GAIhBZ,EAAEE,QAAQW,YACVA,EAAYf,SAASW,cAAc,QACnCI,EAAUK,UAAYlB,EAAEgB,MAAMI,YAAY,OAAOL,OAAOM,WAAa,SACrEb,EAAQW,YAAYN,IAIxBL,EAAQW,YAAYL,GAGpBd,EAAEsB,MAAMd,GAGRR,EAAEuB,iBAAiB,SAAS7B,ICdxB,IAAIC,EDkBJ,IAAIoB,EAASf,EAAEE,QAAQC,SACjBH,EAAEgB,MAAMC,MAAM,KAAKF,OACnBf,EAAEgB,MAAMD,OAGdD,EAAMI,UAAY,GAAGH,KAAUd,IAG/BW,EAASY,MAAMC,MAAQ,GAAGC,KAAKpB,IAAI,IAAYS,EAASd,EAAhB,QAGpCD,EAAEE,QAAQW,YACVA,EAAUK,WAAuC,QAA3BvB,EAACK,EAAEgB,MAAMI,YAAY,cAAM,IAAAzB,EAAAA,EAAI,IAAIoB,OAAOM,WAAa,UAIjFb,EAAQE,UAAUiB,OAAO,UAAWZ,EAAST,GAAOS,EAASd,QA1EzE","file":"input-progressbars.min.js","sourcesContent":["interface String {\r\n    properSplit(split: string|RegExp) : Array<string>\r\n}\r\n\r\n(_ => {\r\n    // This monstrosity grabs all `input` and `textarea` tags and puts them inside a single array\r\n    // so that it's easier to use/ Because of course `querySelectorAll()` returns some weird shit instead\r\n    // of a proper array. Thank fuck for the spread operator.\r\n    const inputs: (HTMLInputElement|HTMLTextAreaElement)[] = [\r\n        ...[...document.querySelectorAll('input.o-form-control')], \r\n        ...[...document.querySelectorAll('textarea.o-form-control')]\r\n    ] as (HTMLInputElement|HTMLTextAreaElement)[];\r\n    \r\n    \r\n    for (const i of inputs) {\r\n        \r\n        // If there's no count specified, get max length. If that's not there, just use 0.\r\n        let max: number = i.dataset.maxCount \r\n            ? Number(i.dataset.maxCount) \r\n            : i.maxLength ?? 0;\r\n        \r\n        let min: number = Number(i.dataset.valLengthMin) ?? 0;\r\n        \r\n        // Create the main container\r\n        let counter: HTMLElement = document.createElement('div');\r\n        counter.classList.add('counter');\r\n        \r\n        // Create the progress bar proper\r\n        let progress: HTMLElement = document.createElement('div');\r\n        progress.classList.add('o-progress-bar');\r\n        \r\n        // Create the character counter\r\n        let count: HTMLElement = document.createElement('span');\r\n        // If `data-max-count` has been specified, that means we're counting elements of a comma-separated list\r\n        // If not, we're just counting chars\r\n        let length = i.dataset.maxCount\r\n            ? i.value.split(',').length\r\n            : i.value.length;\r\n        count.innerText = `${length}/${max}`;\r\n        \r\n        // Append the progress bar to the container\r\n        counter.appendChild(progress);\r\n        \r\n        // If the `data-wordcount` property is there, create a wordcount element and append it\r\n        let wordcount: HTMLElement;\r\n        if (i.dataset.wordcount) {\r\n            wordcount = document.createElement('span');\r\n            wordcount.innerText = i.value.properSplit(/\\s+/).length.toString() + ' words';\r\n            counter.appendChild(wordcount);\r\n        }\r\n        \r\n        // Append character counter\r\n        counter.appendChild(count);\r\n        \r\n        // Append the whole thing right after the target input element\r\n        i.after(counter); \r\n        \r\n        // Listen to input\r\n        i.addEventListener('input', _ => {\r\n\r\n            // If `data-max-count` has been specified, that means we're counting elements of a comma-separated list\r\n            // If not, we're just counting chars\r\n            let length = i.dataset.maxCount\r\n                ? i.value.split(',').length\r\n                : i.value.length;\r\n            \r\n            // Update character counter\r\n            count.innerText = `${length}/${max}`;\r\n            \r\n            // Update progress bar progress\r\n            progress.style.width = `${Math.min(100, 100 * (length / max))}%`\r\n\r\n            // If `data-wordcount` has been specified, update that as well\r\n            if (i.dataset.wordcount) {\r\n                wordcount.innerText = (i.value.properSplit(/\\s+/) ?? []).length.toString() + ' words';\r\n            }\r\n            \r\n            // Check if the input is valid\r\n            counter.classList.toggle('invalid', length < min || length > max);\r\n        });\r\n        \r\n    }\r\n})();","(t=>{var e,n;const a=[...document.querySelectorAll(\"input.o-form-control\"),...document.querySelectorAll(\"textarea.o-form-control\")];for(const t of a){let a=t.dataset.maxCount?Number(t.dataset.maxCount):null!==(e=t.maxLength)&&void 0!==e?e:0,l=null!==(n=Number(t.dataset.valLengthMin))&&void 0!==n?n:0,o=document.createElement(\"div\");o.classList.add(\"counter\");let r=document.createElement(\"div\");r.classList.add(\"o-progress-bar\");let d,s=document.createElement(\"span\"),i=t.dataset.maxCount?t.value.split(\",\").length:t.value.length;s.innerText=`${i}/${a}`,o.appendChild(r),t.dataset.wordcount&&(d=document.createElement(\"span\"),d.innerText=t.value.properSplit(/\\s+/).length.toString()+\" words\",o.appendChild(d)),o.appendChild(s),t.after(o),t.addEventListener(\"input\",(e=>{var n;let i=t.dataset.maxCount?t.value.split(\",\").length:t.value.length;s.innerText=`${i}/${a}`,r.style.width=`${Math.min(100,i/a*100)}%`,t.dataset.wordcount&&(d.innerText=(null!==(n=t.value.properSplit(/\\s+/))&&void 0!==n?n:[]).length.toString()+\" words\"),o.classList.toggle(\"invalid\",i<l||i>a)}))}})();\n//# sourceMappingURL=input-progressbars.min.js.map\n"]}