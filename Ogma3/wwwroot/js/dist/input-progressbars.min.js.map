{"version":3,"sources":["input-progressbars.ts","input-progressbars.min.js"],"names":["_","_a","_b","inputs","document","querySelectorAll","i","max","dataset","maxCount","Number","valFilesizeMax","type","maxLength","currentSize","value","split","length","files","size","min","valLengthMin","counter","createElement","classList","add","progress","wordcount","count","innerText","appendChild","properSplit","toString","after","addEventListener","style","width","Math","toggle"],"mappings":"AAIA,CAACA,ICHG,IAAIC,EAAIC,EDOR,MAAMC,EAAmD,IAC9CC,SAASC,iBAAiB,2BAC1BD,SAASC,iBAAiB,4BAIrC,IAAK,MAAMC,KAAKH,EAAQ,CAGpB,IAAII,EAGAA,EAFAD,EAAEE,QAAQC,SAEJC,OAAOJ,EAAEE,QAAQC,UACjBH,EAAEE,QAAQG,gBAA6B,SAAXL,EAAEM,KAE9BF,OAAOJ,EAAEE,QAAQG,gBAGN,QAAdV,EAAGK,EAAEO,iBAAS,IAAAZ,EAAAA,EAAI,EAIzB,IAAIa,EAA4B,WCJ5B,IAAIb,EAAIC,EDKR,OAAII,EAAEE,QAAQC,SAEHH,EAAES,MAAMC,MAAM,KAAKC,OACpBX,EAAEE,QAAQG,gBAA6B,SAAXL,EAAEM,KAES,QAA7CV,EAAuC,QAAvCD,EAAQK,EAAuBY,MAAM,UAAE,IAAAjB,OAAA,EAAAA,EAAEkB,YAAI,IAAAjB,EAAAA,EAAI,EAG1CI,EAAES,MAAME,QAInBG,EAA4C,QAAzClB,EAAWQ,OAAOJ,EAAEE,QAAQa,qBAAa,IAAAnB,EAAAA,EAAI,EAGhDoB,EAAuBlB,SAASmB,cAAc,OAClDD,EAAQE,UAAUC,IAAI,WAGtB,IAAIC,EAAwBtB,SAASmB,cAAc,OACnDG,EAASF,UAAUC,IAAI,kBAGvB,IAQIE,EARAC,EAAqBxB,SAASmB,cAAc,QAC5CN,EAASH,IACbc,EAAMC,UAAY,GAAGZ,KAAUV,IAG/Be,EAAQQ,YAAYJ,GAIhBpB,EAAEE,QAAQmB,YACVA,EAAYvB,SAASmB,cAAc,QACnCI,EAAUE,UAAYvB,EAAES,MAAMgB,YAAY,OAAOd,OAAOe,WAAa,SACrEV,EAAQQ,YAAYH,IAIxBL,EAAQQ,YAAYF,GAGpBtB,EAAE2B,MAAMX,GAGRhB,EAAE4B,iBAAiB,SAASlC,ICVxB,IAAIC,EDWJ,IAAIgB,EAASH,IAGbc,EAAMC,UAAY,GAAGZ,KAAUV,IAG/BmB,EAASS,MAAMC,MAAQ,GAAGC,KAAKjB,IAAI,IAAYH,EAASV,EAAhB,QAGpCD,EAAEE,QAAQmB,YACVA,EAAUE,WAAuC,QAA3B5B,EAACK,EAAES,MAAMgB,YAAY,cAAM,IAAA9B,EAAAA,EAAI,IAAIgB,OAAOe,WAAa,UAIjFV,EAAQE,UAAUc,OAAO,UAAWrB,EAASG,GAAOH,EAASV,QAvFzE","file":"input-progressbars.min.js","sourcesContent":["interface String {\r\n    properSplit(split: string|RegExp) : Array<string>\r\n}\r\n\r\n(_ => {\r\n    // This monstrosity grabs all `input` and `textarea` tags and puts them inside a single array\r\n    // so that it's easier to use/ Because of course `querySelectorAll()` returns some weird shit instead\r\n    // of a proper array. Thank fuck for the spread operator.\r\n    const inputs: (HTMLInputElement|HTMLTextAreaElement)[] = [\r\n        ...[...document.querySelectorAll('input.o-form-control')], \r\n        ...[...document.querySelectorAll('textarea.o-form-control')]\r\n    ] as (HTMLInputElement|HTMLTextAreaElement)[];\r\n    \r\n    \r\n    for (const i of inputs) {\r\n        \r\n        // If there's no count specified, get max length. If that's not there, just use 0.\r\n        let max: number;\r\n        if (i.dataset.maxCount) {\r\n            // `data-max-count` is set, so that's what we use\r\n            max = Number(i.dataset.maxCount);\r\n        } else if(i.dataset.valFilesizeMax && i.type === 'file') {\r\n            // It's a file input with maximum file size defined, so we get that\r\n            max = Number(i.dataset.valFilesizeMax);\r\n        } else {\r\n            // Just a regular input, so grab `maxLength`\r\n            max = i.maxLength ?? 0;\r\n        }\r\n        \r\n        // Function to get the current size\r\n        let currentSize: () => number = function (): number {\r\n            if (i.dataset.maxCount) {\r\n                // `data-max-count` is set, so we're counting comma-separated values\r\n                return i.value.split(',').length;\r\n            } else if(i.dataset.valFilesizeMax && i.type === 'file') {\r\n                // It's a file input with maximum file size defined, so we get the file size\r\n                return (i as HTMLInputElement).files[0]?.size ?? 0;\r\n            } else {\r\n                // Just a regular ol' input, get the value length\r\n                return i.value.length;\r\n            }\r\n        }\r\n        \r\n        let min: number = Number(i.dataset.valLengthMin) ?? 0;\r\n        \r\n        // Create the main container\r\n        let counter: HTMLElement = document.createElement('div');\r\n        counter.classList.add('counter');\r\n        \r\n        // Create the progress bar proper\r\n        let progress: HTMLElement = document.createElement('div');\r\n        progress.classList.add('o-progress-bar');\r\n        \r\n        // Create the character counter\r\n        let count: HTMLElement = document.createElement('span');\r\n        let length = currentSize()\r\n        count.innerText = `${length}/${max}`;\r\n        \r\n        // Append the progress bar to the container\r\n        counter.appendChild(progress);\r\n        \r\n        // If the `data-wordcount` property is there, create a wordcount element and append it\r\n        let wordcount: HTMLElement;\r\n        if (i.dataset.wordcount) {\r\n            wordcount = document.createElement('span');\r\n            wordcount.innerText = i.value.properSplit(/\\s+/).length.toString() + ' words';\r\n            counter.appendChild(wordcount);\r\n        }\r\n        \r\n        // Append character counter\r\n        counter.appendChild(count);\r\n        \r\n        // Append the whole thing right after the target input element\r\n        i.after(counter); \r\n        \r\n        // Listen to input\r\n        i.addEventListener('input', _ => {\r\n            let length = currentSize();\r\n            \r\n            // Update character counter\r\n            count.innerText = `${length}/${max}`;\r\n            \r\n            // Update progress bar progress\r\n            progress.style.width = `${Math.min(100, 100 * (length / max))}%`\r\n\r\n            // If `data-wordcount` has been specified, update that as well\r\n            if (i.dataset.wordcount) {\r\n                wordcount.innerText = (i.value.properSplit(/\\s+/) ?? []).length.toString() + ' words';\r\n            }\r\n            \r\n            // Check if the input is valid\r\n            counter.classList.toggle('invalid', length < min || length > max);\r\n        });\r\n        \r\n    }\r\n})();","(e=>{var t,a;const l=[...document.querySelectorAll(\"input.o-form-control\"),...document.querySelectorAll(\"textarea.o-form-control\")];for(const e of l){let l;l=e.dataset.maxCount?Number(e.dataset.maxCount):e.dataset.valFilesizeMax&&\"file\"===e.type?Number(e.dataset.valFilesizeMax):null!==(t=e.maxLength)&&void 0!==t?t:0;let n=function(){var t,a;return e.dataset.maxCount?e.value.split(\",\").length:e.dataset.valFilesizeMax&&\"file\"===e.type?null!==(a=null===(t=e.files[0])||void 0===t?void 0:t.size)&&void 0!==a?a:0:e.value.length},o=null!==(a=Number(e.dataset.valLengthMin))&&void 0!==a?a:0,i=document.createElement(\"div\");i.classList.add(\"counter\");let r=document.createElement(\"div\");r.classList.add(\"o-progress-bar\");let d,s=document.createElement(\"span\"),u=n();s.innerText=`${u}/${l}`,i.appendChild(r),e.dataset.wordcount&&(d=document.createElement(\"span\"),d.innerText=e.value.properSplit(/\\s+/).length.toString()+\" words\",i.appendChild(d)),i.appendChild(s),e.after(i),e.addEventListener(\"input\",(t=>{var a;let u=n();s.innerText=`${u}/${l}`,r.style.width=`${Math.min(100,u/l*100)}%`,e.dataset.wordcount&&(d.innerText=(null!==(a=e.value.properSplit(/\\s+/))&&void 0!==a?a:[]).length.toString()+\" words\"),i.classList.toggle(\"invalid\",u<o||u>l)}))}})();\n//# sourceMappingURL=input-progressbars.min.js.map\n"]}