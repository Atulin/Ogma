{"version":3,"sources":["admin/namespaces.min.js"],"names":["anamespaces_vue","Vue","el","data","form","name","color","id","lens","minNameLength","maxNameLength","err","namespaces","route","methods","createNamespace","e","preventDefault","this","length","push","axios","post","then","_","getNamespaces","catch","error","console","log","put","get","response","deleteNamespace","t","confirm","delete","editNamespace","cancelEdit","[object Object]","document","getElementById","dataset","r"],"mappings":"AAAA,IAAIA,gBAAkB,IAAIC,IAAI,CAC1BC,GAAI,OACJC,KAAM,CACFC,KAAM,CACFC,KAAM,KACNC,MAAO,KACPC,GAAI,MAERC,KAAM,CACFC,cAAe,EACfC,cAAe,IAEnBC,IAAK,GACLC,WAAY,GACZC,MAAO,KACPP,MAAO,MAEXQ,QAAS,CAILC,gBAAiB,SAAUC,GACvBA,EAAEC,iBAGFC,KAAKP,IAAM,IACPO,KAAKd,KAAKC,KAAKc,OAASD,KAAKV,KAAKE,eAAiBQ,KAAKd,KAAKC,KAAKc,OAASD,KAAKV,KAAKC,gBACrFS,KAAKP,IAAIS,KAAK,0BAA0BF,KAAKV,KAAKC,qBAAqBS,KAAKV,KAAKE,kCACjFQ,KAAKP,IAAIQ,OAAS,GAElBD,KAAKd,KAAKC,OAIW,OAAjBa,KAAKd,KAAKG,GACVc,MAAMC,KAAKJ,KAAKL,MACZ,CACIR,KAAMa,KAAKd,KAAKC,KAChBC,MAAOY,KAAKd,KAAKE,QAEpBiB,KAAKC,IACFN,KAAKO,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,KAMpBN,MAAMS,IAAIZ,KAAKL,MAAQ,IAAMK,KAAKd,KAAKG,GACnC,CACIA,GAAIW,KAAKd,KAAKG,GACdF,KAAMa,KAAKd,KAAKC,KAChBC,MAAOY,KAAKd,KAAKE,QAEpBiB,KAAKC,IACFN,KAAKO,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,KAGfJ,KAAKC,IACFN,KAAKd,KAAKC,KACNa,KAAKd,KAAKG,GAAK,SAQvCkB,cAAe,WACXJ,MAAMU,IAAIb,KAAKL,OACVU,KAAKS,IACFd,KAAKN,WAAaoB,EAAS7B,OAE9BuB,MAAMC,IACHC,QAAQC,IAAIF,MAKxBM,gBAAiB,SAAUC,GACpBC,QAAQ,wBACPd,MAAMe,OAAOlB,KAAKL,MAAQ,IAAMqB,EAAE3B,IAC7BgB,KAAKC,IACFN,KAAKO,kBAERC,MAAMC,IACHC,QAAQC,IAAIF,MAM5BU,cAAe,SAAUH,GACrBhB,KAAKd,KAAKC,KAAO6B,EAAE7B,KACnBa,KAAKd,KAAKE,MAAQ4B,EAAE5B,MACpBY,KAAKd,KAAKG,GAAK2B,EAAE3B,IAIrB+B,WAAY,WACRpB,KAAKd,KAAKC,KACNa,KAAKd,KAAKE,MACNY,KAAKd,KAAKG,GAAK,OAI/BgC,UAEIrB,KAAKL,MAAQ2B,SAASC,eAAe,SAASC,QAAQ7B,MAEtDQ,MAAMU,IAAIb,KAAKL,MAAQ,eAClBU,KAAKoB,IACFzB,KAAKV,KAAOmC,EAAExC,OAEjBuB,MAAMV,GAAKY,QAAQD,MAAMX,IAE9BE,KAAKO","file":"namespaces.min.js","sourcesContent":["let anamespaces_vue = new Vue({\r\n    el: \"#app\",\r\n    data: {\r\n        form: {\r\n            name: null,\r\n            color: null,\r\n            id: null\r\n        },\r\n        lens: {\r\n            minNameLength: 5,\r\n            maxNameLength: 10,\r\n        },\r\n        err: [],\r\n        namespaces: [],\r\n        route: null,\r\n        color: null\r\n    },\r\n    methods: {\r\n\r\n        // Contrary to its name, it also modifies a namespace if needed.\r\n        // It was simply easier to slap both functionalities into a single function.\r\n        createNamespace: function (e) {\r\n            e.preventDefault();\r\n\r\n            // Validation\r\n            this.err = [];\r\n            if (this.form.name.length > this.lens.maxNameLength || this.form.name.length < this.lens.minNameLength)\r\n                this.err.push(`Name has to be between ${this.lens.minNameLength} and ${this.lens.maxNameLength} characters long.`);\r\n            if (this.err.length > 0) return;\r\n\r\n            if (this.form.name) {\r\n\r\n                // If no ID has been set, that means it's a new namespace.\r\n                // Thus, we POST it.\r\n                if (this.form.id === null) {\r\n                    axios.post(this.route,\r\n                        {\r\n                            name: this.form.name,\r\n                            color: this.form.color\r\n                        })\r\n                        .then(_ => {\r\n                            this.getNamespaces()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        });\r\n\r\n                    // If the ID is set, that means it's an existing namespace.\r\n                    // Thus, we PUT it.\r\n                } else {\r\n                    axios.put(this.route + '/' + this.form.id,\r\n                        {\r\n                            id: this.form.id,\r\n                            name: this.form.name,\r\n                            color: this.form.color\r\n                        })\r\n                        .then(_ => {\r\n                            this.getNamespaces()\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(error);\r\n                        })\r\n                        // Clear the form too\r\n                        .then(_ => {\r\n                            this.form.name =\r\n                                this.form.id = null;\r\n                        });\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        // Gets all existing namespaces\r\n        getNamespaces: function () {\r\n            axios.get(this.route)\r\n                .then(response => {\r\n                    this.namespaces = response.data\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n\r\n        // Deletes a selected namespace\r\n        deleteNamespace: function (t) {\r\n            if(confirm(\"Delete permanently?\")) {\r\n                axios.delete(this.route + '/' + t.id)\r\n                    .then(_ => {\r\n                        this.getNamespaces()\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                    });\r\n            }\r\n        },\r\n\r\n        // Throws a namespace from the list into the editor\r\n        editNamespace: function (t) {\r\n            this.form.name = t.name;\r\n            this.form.color = t.color;\r\n            this.form.id = t.id;\r\n        },\r\n\r\n        // Clears the editor\r\n        cancelEdit: function () {\r\n            this.form.name =\r\n                this.form.color =\r\n                    this.form.id = null;\r\n        },\r\n    }, \r\n\r\n    mounted() {\r\n        // Grab the route from route helper\r\n        this.route = document.getElementById('route').dataset.route;\r\n        // Get validation data\r\n        axios.get(this.route + '/validation')\r\n            .then(r => {\r\n                this.lens = r.data;\r\n            })\r\n            .catch(e => console.error(e));\r\n        // Grab the initial set of namespaces\r\n        this.getNamespaces();\r\n    }\r\n});"]}